#!/bin/bash

VERSION=2.1.0

current_working_dir=`pwd`
bashdot_config_file=$HOME/.bashdot

LOGGER_FMT=${LOGGER_FMT:="%Y-%m-%d"}
LOGGER_LVL=${LOGGER_LVL:="info"}

if [ ! -z $BASHDOT_LOG_LEVEL ]; then
    LOGGER_LVL=$BASHDOT_LOG_LEVEL
fi
    
# Files will not be symlinked by bashdot
ignored_files="README.md"

action=$1

usage() {
    case $1 in
        commands)
            echo "Usage: `basename $0` [dir|install|links|profiles|uninstall|version] OPTIONS"
            ;;
        install)
            echo "Usage: `basename $0` install PROFILE1 PROFILE2 ... PROFILEN"
            ;;
        uninstall)
            echo "Usage: `basename $0` uninstall DIRECTORY PROFILE"
            ;;
    esac
}

if [ "$action" != "dir" ] &&
    [ "$action" != "install" ] &&
    [ "$action" != "links" ] &&
    [ "$action" != "profiles" ] &&
    [ "$action" != "uninstall" ] &&
    [ "$action" != "version" ]; then
    usage commands
    exit 1
fi

function exit_if_invalid_profile_name() {
    profile=$1
    echo $profile | grep "^[a-zA-Z0-9_-]*$"
    if [ $? -ne 0 ]; then
        log error "Invalid profile name '$profile'. Profiles must be alpha number with dashes or underscores."
        exit 1
    fi
}

function log {
    action=$1 && shift

    case $action in
        debug)  [[ $LOGGER_LVL =~ debug ]]           && echo "$( date "+${LOGGER_FMT}" ) - DEBUG - $@" 1>&2 ;;
        info)   [[ $LOGGER_LVL =~ debug|info ]]      && echo "$( date "+${LOGGER_FMT}" ) - INFO - $@" 1>&2  ;;
        warn)   [[ $LOGGER_LVL =~ debug|info|warn ]] && echo "$( date "+${LOGGER_FMT}" ) - WARN - $@" 1>&2  ;;
        error)  [[ ! $LOGGER_LVL =~ none ]]          && echo "$( date "+${LOGGER_FMT}" ) - ERROR - $@" 1>&2 ;;
    esac

    true
}

install() {
    profile=$1
    profiles_dir=$current_working_dir/profiles
    profile_dir=$profiles_dir/$profile


    if [ ! -d $profiles_dir ]; then
        log error "Directory profiles does not exist in '$current_working_dir'."
        exit 1
    fi

    if [ ! -d $profile_dir ]; then
        log error "Profile '$profile' directory does not exist."
        exit 1
    fi

    log info "Adding dotfiles profile '$profile'."

    log debug "Checking for exiting dotfiles."
    cd $profile_dir
    for file in `ls |grep -v $ignored_files`; do
        dotfile=~/.$file
        source_file=$profile_dir/$file
        if [ -e $dotfile ]; then
            existing=`readlink $dotfile`

            # Skip files which already link to the same location
            if [ "$existing" == "$source_file" ]; then
                continue
            fi

            log error "File '$dotfile' already exists, exiting."
            exit 1
        fi
    done
    log debug "Found no existing dotfiles in home."

    if [ -f $bashdot_config_file ]; then
        egrep "^$current_working_dir$" $bashdot_config_file > /dev/null

        if [ $? -ne 0 ]; then
            log debug "Appending bashdot '$current_working_dir' to '$bashdot_config_file'"
            echo $current_working_dir >> $bashdot_config_file
        fi
    else
        echo $current_working_dir > $bashdot_config_file
    fi

    log info "Installing dotfiles from '$profiles_dir'."
    for file in `ls |grep -v $ignored_files`; do
        dotfile=~/.$file
        source_file=$profile_dir/$file
        existing=`readlink $dotfile`

        if [ "$existing" == "$source_file" ]; then
            log debug "File '$dotfile' is the same, continuing."
            continue
        fi
        log info "Linking '$source_file' to '$dotfile'."
        ln -s $source_file $dotfile
    done

    log info "Completed adding dotfiles profile '$profile'."
}

list_links() {
    for i in $(ls -a ~); do

        # Only evaluate symlinks
        if [[ -h ~/$i ]]; then

            # Only include if it points to the dotfiles directory
            for bashdot_dir in $(cat $bashdot_config_file); do
                readlink ~/$i |egrep "^$bashdot_dir/profiles" > /dev/null
                if [ $? -eq 0 ];then
                    echo $i
                fi
            done
        fi
    done
}

list_profiles() {
    if [ ! -f $bashdot_config_file ];then
        log info "No dotfiles installed by bashdot."
    else
        for dir in $(cat $bashdot_config_file); do
            for link in $(list_links); do
                readlink ~/$link | egrep "^$dir/profiles" > /dev/null
                if [ $? -eq 0 ]; then
                    profile=`readlink ~/$link |sed -e "s/^.*\/profiles\/\(.*\)\/.*$/\1/"`
                    echo "$dir $profile"
                fi
            done
        done |sort |uniq
    fi
}

show_links() {
    for link in $(list_links); do
        dest=`readlink ~/$link`
        chomped_link="${link%\\n}"
        echo "~/$chomped_link -> $dest"
    done
}

dir() {
    if [ ! -f $bashdot_config_file ];then
        log info "No dotfiles installed by bashdot."
    else
        cat $bashdot_config_file |sort
    fi
}

uninstall() {
    dir=$1
    profile=$2

    if [ ! -f $bashdot_config_file ]; then
        log error "Config file '$bashdot_config_file' not found."
        log error "No dotfiles installed by bashdot."
        exit 1
    fi

    # Don't proceed with uninstall if profiles not available in given directory
    list_profiles |grep "^$dir $profile$"
    if [ $? -ne 0 ];then
        log error "Profile '$profile' not installed from '$dir'."
        exit 1
    fi

    # Loop through each file and only remove if they are a symlink
    # and point to a file in this profile in the target dir
    for link in $(list_links);do
        echo `readlink ~/$link` |grep ^$dir/profiles/$profile > /dev/null
        if [ $? -eq 0 ]; then
            log info "Removing '$link'."
            \rm ~/$link
        fi
    done

    # If no more profiles point to this directory, remove it
    dir_empty=true
    for link in $(list_links); do
        echo `readlink ~/$link` |grep ^$dir/profiles > /dev/null
        if [ $? -eq 0 ]; then
            dir_empty=false
        fi
    done

    if [ "$dir_empty" = true ]; then
        log info "Removing '$dir' from '$bashdot_config_file'."
        mv $bashdot_config_file ${bashdot_config_file}.backup
        cat ${bashdot_config_file}.backup |grep -v "^$dir$" > $bashdot_config_file
    fi

    # If there are no more bashdot profiles, remove .bashdot and backup
    if [ ! -s $bashdot_config_file ]; then
        \rm -f $bashdot_config_file ${bashdot_config_file}.backup
    fi
}

case $action in
    dir)
        dir
        ;;
    install)
        if [ $# -lt 2 ]; then
            usage install
            exit 1
        fi

        while true; do
            shift

            if [ -z $1 ];then
                break
            fi

            exit_if_invalid_profile_name $1
            install $1
        done

        log info "Completed installation of all profiles succesfully."
        ;;
    links)
        show_links
        ;;
    profiles)
        list_profiles
        ;;
    uninstall)
        if [ $# -lt 3 ]; then
            usage uninstall
            exit 1
        fi
        uninstall $2 $3
        log info "Completed uninstallation succesfully."
        ;;
    version)
        echo $VERSION
        ;;
esac
